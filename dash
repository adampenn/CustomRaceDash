#!/usr/bin/python3

# System modules
import tkinter as tk
import serial
import socket
import time
import obd
from tkinter import ttk
from queue import Queue
from threading import Thread

# Set up some global variables
num_fetch_threads = 1
queue = Queue()

# Gets data from dataMaker app
def readFromDataMaker(app, q):
  print("*** Read thread running")
  hostMACAddress = 'b8:27:eb:2d:17:5a'
  #hostMACAddress = 'b8:27:eb:7b:60:24'
  port = 3
  backlog = 1
  size = 128
  s = socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM)
  s.bind((hostMACAddress,port))
  s.listen(backlog)
  client, address = s.accept()
  print('Connected by', address)
  while 1:
    data = client.recv(size)
    if data:
      data = (data.decode("utf-8")).split()
      q.put(data)
      q.task_done()
      #client.send(data)

# This gets the data from the ELM237 BT module
def readFromELM(command):
  connection = obd.OBD()
  fromELM = connection.query(command)
  #todo: figure out how to differ commands and convert speed to mph
  #print(command)
  print(fromELM.value.magnitude)
  magnitude = str(fromELM.value.magnitude)
  return magnitude;

# This is the thread that reads from the Ardino
def readData(app, q):
  print("*** Read thread running")
  connection = obd.OBD()
  speed = obd.commands.SPEED
  rpm = obd.commands.RPM
  eng_temp = obd.commands.COOLANT_TEMP
  fuel_level = obd.commands.FUEL_LEVEL
  intake_temp = obd.commands.INTAKE_TEMP
  while True:
    time.sleep(.05)
    if(connection.query(speed)):
      data = [
        readFromELM(speed),       #data[0]
        readFromELM(rpm),         #data[1]
        readFromELM(eng_temp),    #data[2]
        #readFromELM(fuel_level),  #etc.
        readFromELM(intake_temp)
      ]
      q.put(data)
      q.task_done()

# Update Gauge Values
def updateGauges(app, q):
  print("*** Update thread running")
  while True:
    time.sleep(.05)
    data = q.get()

    app.MPH["value"] = float(data[0])
    app.labelMPH["text"] = data[0] + " MPH"

    app.RPM["value"] = float(data[1])
    app.labelTemp["text"] = data[1] + "RPM"

    app.Temp["value"] = float(data[2])
    app.labelTemp["text"] = "Engine Temp " + data[2] + "C"

    app.fuelLevel["value"] = float(data[3])
    app.labelFuelLevel["text"] = "Fuel Level " + data[3] + "%"

    app.intakeTemp["value"] = float(data[4])
    app.labelIntakeTemp["text"] = "Intake Temp " + data[4] + "C"

# Declare a class for the GUI
class Dash(tk.Tk):

  def __init__(self):
    # Init
    tk.Tk.__init__(self)
    style = ttk.Style()
    style.configure("BW.TLabel", foreground="black")
    self.geometry('800x480')

    # Set up the different screens
    notebook = ttk.Notebook(self)
    screen1 = ttk.Frame(notebook)
    screen2 = ttk.Frame(notebook)
    notebook.add(screen1, text='Screen 1')
    notebook.add(screen2, text='Screen 2')
    notebook.pack()

    # TEMP
    self.labelTemp = ttk.Label(screen1, text="Engine Temp C", style="BW.TLabel")
    self.labelTemp.pack()
    self.Temp = ttk.Progressbar(screen1, orient="horizontal", length=800,
                               mode="determinate", value=0, maximum=250)
    self.Temp.pack()

    # RPM
    self.labelRPM = ttk.Label(screen1, text="RPM", style="BW.TLabel")
    self.labelRPM.pack()
    self.RPM = ttk.Progressbar(screen1, orient="horizontal", length=800,
                               mode="determinate", value=0, maximum=7000)
    self.RPM.pack()

    # MPH
    self.labelMPH = ttk.Label(screen2, text="MPH", style="BW.TLabel")
    self.labelMPH.pack()
    self.MPH = ttk.Progressbar(screen2, orient="horizontal", length=800,
                               mode="determinate", value=0, maximum=120)
    self.MPH.pack()

    # Fuel Level
    self.labelFuelLevel = ttk.Label(screen2, text="Fuel Level", style="BW.TLabel")
    self.labelFuelLevel.pack()
    self.fuelLevel = ttk.Progressbar(screen2, orient="horizontal", length=800,
                               mode="determinate", value=0, maximum=100)
    self.fuelLevel.pack()

    # Intake Temp
    self.labelIntakeTemp = ttk.Label(screen2, text="Intake Temp", style="BW.TLabel")
    self.labelIntakeTemp.pack()
    self.intakeTemp = ttk.Progressbar(screen2, orient="horizontal", length=800,
                               mode="determinate", value=0, maximum=200)
    self.intakeTemp.pack()


print('*** Main thread running')

app = Dash()

# Set up some threads
read = Thread(target=readFromDataMaker, args=(app, queue,))
read.setDaemon(True)
read.start()

update = Thread(target=updateGauges, args=(app, queue,))
update.setDaemon(True)
update.start()

app.mainloop()

queue.join()
print('*** Done')
