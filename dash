#!/usr/bin/python3

# System modules
import tkinter as tk
import serial
import time
import obd
from tkinter import ttk
from queue import Queue
from threading import Thread

# Set up some global variables
num_fetch_threads = 1
queue = Queue()

# This gets the data from the ELM237 BT module
def readFromELM(command):
  fromELM = connection.query(command)
  #todo: figure out how to differ commands and convert speed to mph
  printf(command)
  magnitude = str(fromELM.value.magnitude)
  return magnitude;

# This is the thread that reads from the Ardino
def readFromArduino(app, q):
  print("*** Read thread running")
  connection = obd.OBD()
  speed = obd.commands.SPEED
  rpm = obd.commands.RPM
  eng_temp = obd.commands.COOLANT_TEMP
  fuel_level = obd.commands.FUEL_LEVEL
  intake_temp = obd.commands.INTAKE_TEMP
  while True:
    if(connection.query(speed)):
      data = [
        readFromELM(speed),       #data[0]
        readFromELM(rpm),         #data[1]
        readFromELM(eng_temp),    #data[2]
        readFromELM(fuel_level),  #etc.
        readFromELM(intake_temp)
      ]
      q.put(data)
      q.task_done()

# Update Gauge Values
def updateGauges(app, q):
  print("*** Update thread running")
  while True:
    time.sleep(.05)
    data = q.get()
    app.MPH["value"] = float(data[0])
    app.labelTemp["value"] = "Engine Temp " + data[2] + "C"
    app.RPM["value"] = float(data[1])
    app.Temp["value"] = float(data[2])
    app.labelTemp["value"] = "Engine Temp " + data[2] + "C"

# Declare a class for the GUI
class SampleApp(tk.Tk):

  def __init__(self):
    # Init
    tk.Tk.__init__(self)
    self.style = ttk.Style()
    self.style.configure("BW.TLabel", foreground="black")

    # TEMP
    self.labelTemp = ttk.Label(text="Engine Temp C", style="BW.TLabel")
    self.labelTemp.pack()
    self.Temp = ttk.Progressbar(self, orient="horizontal", length=200,
                               mode="determinate", value=0, maximum=250)
    self.Temp.pack()

    # RPM
    self.labelRPM = ttk.Label(text="RPM", style="BW.TLabel")
    self.labelRPM.pack()
    self.RPM = ttk.Progressbar(self, orient="horizontal", length=200,
                               mode="determinate", value=0, maximum=7000)
    self.RPM.pack()

    # MPH
    self.labelMPH = ttk.Label(text="MPH", style="BW.TLabel")
    self.labelMPH.pack()
    self.MPH = ttk.Progressbar(self, orient="horizontal", length=200,
                               mode="determinate", value=0, maximum=140)
    self.MPH.pack()

    # Oil Pressure
    self.labelOilPressure = ttk.Label(text="Oil Pressure", style="BW.TLabel")
    self.labelOilPressure.pack()
    self.OilPressure = ttk.Progressbar(self, orient="horizontal", length=200,
                               mode="determinate", value=0, maximum=250)
    self.OilPressure.pack()


#  def get_RPM(self):
#    self.RPM["value"] = self.scale.get()

print('*** Main thread running')

app = SampleApp()

# Set up some threads
read = Thread(target=readFromArduino, args=(app, queue,))
read.setDaemon(True)
read.start()

update = Thread(target=updateGauges, args=(app, queue,))
update.setDaemon(True)
update.start()

app.mainloop()

queue.join()
print('*** Done')
